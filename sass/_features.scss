.features {
    grid-column: center-start / center-end;

    margin: 15rem 0;

    @supports(display: grid) { // we willen dit natuurlijk alleen maar gebruiken als de browser het ook kan volgen... (A)
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(25rem, 1fr)); // 'prop zoveel kolommen in de container als mogelijk (auto-fit), als die maar tussen de 25rem en 1fr groot zijn (minmax)'
        grid-gap: 6rem;
        align-items: start;     // bij default stretch krijg je een grote marge tussen kop en tekst in die features met maar 3 regels tekst, omdat de rows zich uitrekken om de cel te vullen    
    }
}

.feature {      // herbruikbaar onderdeel, aldus Jonas

    float: left;        // ouderwetse float voor ouderwetse browsers
    width: 33.33333%;
    margin-bottom: 6rem;

    @supports(display: grid) {  // als browser grid w√©l begrijpt, moet de code hierboven niet actief blijven! Grid en Flexbox negeren automatisch al: float, display, inline-block, display: table-cell en vertical-align.
        width: auto;
        margin-bottom: 0;
    }


    display: grid;
    grid-template-columns: min-content 1fr;
    grid-row-gap: 1.5rem;
    grid-column-gap: 2.5rem;

    &__icon {
        fill: $color-primary;
        width: 4.5rem;
        height: 4.5rem;
        grid-row: 1 / span 2; // -1 voor het einde kan alleen bij expliciete grid
        transform: translateY(-1rem);
    }

    &__text {
        font-size: 1.7rem;
    }
}